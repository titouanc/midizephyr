name: CI

on:
  push: {}
  release:
    types: [created]

env:
  BUILD_MATRIX: >
    {"include": [
    {"app": "midi-loopback", "board": "native_posix", "executable": "zephyr.exe"}
    ]}

jobs:
  discover:
    name: Discover projects to build
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
    - run: echo matrix='${{ env.BUILD_MATRIX }}' >> $GITHUB_OUTPUT
      id: set-matrix

  build:
    name: Build
    runs-on: ubuntu-latest
    needs:
    - discover
    strategy:
      matrix: ${{ fromJson(needs.discover.outputs.matrix) }}

    steps:
    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install --no-install-recommends -y wget gcc-arm-none-eabi gcc-multilib ninja-build

    - name: Install cmake 3.21
      working-directory: /usr
      run: |
        sudo wget https://github.com/Kitware/CMake/releases/download/v3.21.2/cmake-3.21.2-linux-x86_64.sh
        echo "3310362c6fe4d4b2dc00823835f3d4a7171bbd73deb7d059738494761f1c908c  cmake-3.21.2-linux-x86_64.sh" | sha256sum --check
        sudo sh cmake-3.21.2-linux-x86_64.sh --skip-license

    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: true

    - uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: pip

    - name: Install Python dependencies
      run: pip install -r zephyr/scripts/requirements-base.txt

    - name: Cache west modules
      uses: actions/cache@v3
      env:
        cache-name: cache-zephyr-modules
      with:
        key: ${{ runner.os }}-${{ hashFiles('.gitmodules') }}
        path: |
          modules/
          tools/
          bootloader/

    - name: West update
      run: west update

    - name: Build ${{ matrix.app }} for ${{ matrix.board }}
      run: west build -b ${{ matrix.board }} ${{ matrix.app }}
      env:
        GNUARMEMB_TOOLCHAIN_PATH: /usr
        ZEPHYR_TOOLCHAIN_VARIANT: gnuarmemb

    - uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.app }}-${{ matrix.board }}
        path: build/zephyr/${{ matrix.executable }}

  test-usb-midi:
    name: Test USB-MIDI loopback
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - run: sudo apt install -y usbip

    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: pip

    - uses: actions/download-artifact@v3
      with:
        name: midi-loopback-native_posix

    - run: chmod +x zephyr.exe

    - name: Start midi-loopback
      id: startapp
      run: |
        ./zephyr.exe &
        echo pid=$! >> $GITHUB_OUTPUT
        sleep 5

    - name: Attach virtual USB device
      run: |
        sudo usbip attach -r localhost -b 1-1
        sleep 5

    - name: List MIDI interfaces
      run: amidi -l

    - name: Stop midi-loopback
      run: kill ${{ steps.startapp.outputs.pid }}

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'created'
    needs:
    - discover
    - build

    strategy:
      matrix: ${{ fromJson(needs.discover.outputs.matrix) }}

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
    - id: get_release
      uses: bruceadams/get-release@v1.3.2

    - uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.app }}-${{ matrix.board }}

    - name: Publish ${{ matrix.app }} for ${{ matrix.board }} to Github release
      id: upload_release_firmware
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: ${{ matrix.executable }}
        asset_name: ${{ matrix.app }}-${{ matrix.board }}.bin
        asset_content_type: application/octet-stream
